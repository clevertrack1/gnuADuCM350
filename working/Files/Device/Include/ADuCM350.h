/*
 * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     ADuCM350.h
 * @brief    CMSIS HeaderFile
 * @version  0.1
 * @date     17. April 2018
 * @note     Generated by SVDConv V3.2.66 on Tuesday, 17.04.2018 13:29:54
 *           from File 'ADuCM350.svd',
 *           last modified on Tuesday, 17.04.2018 03:59:49
 */



/** @addtogroup Analog Devices
  * @{
  */


/** @addtogroup ADuCM350
  * @{
  */


#ifndef ADUCM350_H
#define ADUCM350_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M3 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  ADuCM350 Specific Interrupt Numbers  ========================================== */
  WUT_IRQn                  =   0,              /*!< 0  Wake Up Timer interrupt                                                */
  WDT_IRQn                  =  10,              /*!< 10 interrupt                                                              */
  TIMER0_IRQn               =  11,              /*!< 11 TIMER0                                                                 */
  TIMER1_IRQn               =  12,              /*!< 12 TIMER1                                                                 */
  Uart_IRQn                 =  14,              /*!< 14 interrupt                                                              */
  SPI0_IRQn                 =  15,              /*!< 15 SPI 0 interrupt                                                        */
  SPIH_IRQn                 =  16,              /*!< 16 interrupt                                                              */
  I2C0_IRQn                 =  17,              /*!< 17 I2C 0 interrupt                                                        */
  DMA_IRQn                  =  19,              /*!< 19 DMA interrupt                                                          */
  USB_IRQn                  =  37,              /*!< 37 USB Controller interrupt                                               */
  I2S_IRQn                  =  39,              /*!< 39 I2S interrupt                                                          */
  SPI1_IRQn                 =  42,              /*!< 42 interrupt                                                              */
  RTC_IRQn                  =  43,              /*!< 43 Real Time Clock interrupt                                              */
  Beep_IRQn                 =  45,              /*!< 45 Beep interrupt                                                         */
  LCD_IRQn                  =  46,              /*!< 46 LCD Controller interrupt                                               */
  GPIOA_IRQn                =  47,              /*!< 47 interrupt                                                              */
  AFE_IRQn                  =  50,              /*!< 50 Analog Front End interrupt                                             */
  Flash_EEprom_IRQn         =  55,              /*!< 55 Flash EEPROM interrupt                                                 */
  RBG_IRQn                  =  58,              /*!< 58 Random Bit Generator interrupt                                         */
  PDI_IRQn                  =  59               /*!< 59 Paraller Display Interface interrupt                                   */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M3 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0201U       /*!< CM3 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU present or not                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm3.h"                           /*!< ARM Cortex-M3 processor and core peripherals                              */
#include "system_ADuCM350.h"                    /*!< ADuCM350 System                                                           */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           GPT0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General Purpose Timer 0 (GPT0)
  */

typedef struct {                                /*!< (@ 0x40000000) GPT0 Structure                                             */
  __IOM uint16_t  REG_GPT0_GPTLD;               /*!< (@ 0x00000000) 16-bit load value                                          */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_GPT0_GPTVAL;              /*!< (@ 0x00000004) 16-bit timer value. read only.                             */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_GPT0_GPTCON;              /*!< (@ 0x00000008) Control Register                                           */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_GPT0_GPTCLRI;             /*!< (@ 0x0000000C) Clear interrupt register                                   */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_GPT0_GPTCAP;              /*!< (@ 0x00000010) Capture Register                                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_GPT0_GPTALD;              /*!< (@ 0x00000014) 16-bit load value, asynchronous                            */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_GPT0_GPTAVAL;             /*!< (@ 0x00000018) 16-bit timer value, asynchronous                           */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_GPT0_GPTSTA;              /*!< (@ 0x0000001C) Status                                                     */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_GPT0_GPTPCON;             /*!< (@ 0x00000020) PWM Control Register                                       */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_GPT0_GPTPMAT;             /*!< (@ 0x00000024) PWM Match Value                                            */
} GPT0_Type;                                    /*!< Size = 38 (0x26)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPT1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General Purpose Timer1 (GPT1)
  */

typedef struct {                                /*!< (@ 0x40000400) GPT1 Structure                                             */
  __IOM uint16_t  REG_GPT1_GPTLD;               /*!< (@ 0x00000000) 16-bit load value                                          */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_GPT1_GPTVAL;              /*!< (@ 0x00000004) 16-bit timer value                                         */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_GPT1_GPTCON;              /*!< (@ 0x00000008) Control Register                                           */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_GPT1_GPTCLRI;             /*!< (@ 0x0000000C) Clear interrupt register                                   */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_GPT1_GPTCAP;              /*!< (@ 0x00000010) Capture                                                    */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_GPT1_GPTALD;              /*!< (@ 0x00000014) 16-bit load value, asynchronous                            */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_GPT1_GPTAVAL;             /*!< (@ 0x00000018) 16-bit timer value, asynchronous                           */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_GPT1_GPTSTA;              /*!< (@ 0x0000001C) Status Register                                            */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_GPT1_GPTPCON;             /*!< (@ 0x00000020) PWM Control Register                                       */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_GPT1_GPTPMAT;             /*!< (@ 0x00000024) PWM Match Value                                            */
} GPT1_Type;                                    /*!< Size = 38 (0x26)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPT2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General Purpose Timer2 (GPT2)
  */

typedef struct {                                /*!< (@ 0x40000800) GPT2 Structure                                             */
  __IOM uint16_t  REG_GPT2_GPTLD;               /*!< (@ 0x00000000) 16-bit load value                                          */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_GPT2_GPTVAL;              /*!< (@ 0x00000004) 16-bit timer value                                         */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_GPT2_GPTCON;              /*!< (@ 0x00000008) Control Register                                           */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_GPT2_GPTCLRI;             /*!< (@ 0x0000000C) Clear Interrupt register                                   */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_GPT2_GPTCAP;              /*!< (@ 0x00000010) Capture                                                    */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_GPT2_GPTALD;              /*!< (@ 0x00000014) 16-bit load value, asynchronous                            */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_GPT2_GPTAVAL;             /*!< (@ 0x00000018) 16-bit timer value, asynchronous                           */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_GPT2_GPTSTA;              /*!< (@ 0x0000001C) Status                                                     */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_GPT2_GPTPCON;             /*!< (@ 0x00000020) PWM Control Register                                       */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_GPT2_GPTPMAT;             /*!< (@ 0x00000024) PWM Match Value                                            */
} GPT2_Type;                                    /*!< Size = 38 (0x26)                                                          */



/* =========================================================================================================================== */
/* ================                                            PWR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power Management Unit (PWR)
  */

typedef struct {                                /*!< (@ 0x40002400) PWR Structure                                              */
  __IOM uint16_t  REG_PWR_PWRMOD;               /*!< (@ 0x00000000) PWR Power modes                                            */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_PWR_PWRKEY;               /*!< (@ 0x00000004) PWR Key protection for PWRMOD                              */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_PWR_PSMCON;               /*!< (@ 0x00000008) PWR PSM Configuration                                      */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_PWR_OSCKEY;               /*!< (@ 0x0000000C) PWR Key protection for OSCCTRL                             */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_PWR_OSCCTRL;              /*!< (@ 0x00000010) PWR Oscillator control                                     */
  __IM  uint16_t  RESERVED4[7];
  __IOM uint16_t  REG_PWR_EI0CFG;               /*!< (@ 0x00000020) PWR External Interrupt configuration 0                     */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_PWR_EI1CFG;               /*!< (@ 0x00000024) PWR External Interrupt configuration 1                     */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  EI2CFG;                       /*!< (@ 0x00000028) PWR External Interrupt configuration 2                     */
  __IM  uint16_t  RESERVED7[3];
  __IOM uint16_t  REG_PWR_EICLR;                /*!< (@ 0x00000030) PWR External Interrupt clear                               */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_PWR_NMICLR;               /*!< (@ 0x00000034) PWR Non-maskable interrupt clear                           */
  __IM  uint16_t  RESERVED9;
  __IOM uint16_t  REG_PWR_USBWKSTAT;            /*!< (@ 0x00000038) PWR USB Wakeup Status                                      */
  __IM  uint16_t  RESERVED10[3];
  __IOM uint16_t  REG_PWR_RSTSTA;               /*!< (@ 0x00000040) PWR Reset status                                           */
  __IM  uint16_t  RESERVED11[35];
  __IOM uint16_t  REG_PWR_VCCMCON;              /*!< (@ 0x00000088) PWR VCCM Control and Status                                */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  REG_PWR_VBACKCON;             /*!< (@ 0x0000008C) PWR VBACK control and status                               */
} PWR_Type;                                     /*!< Size = 142 (0x8e)                                                         */



/* =========================================================================================================================== */
/* ================                                            WUT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Wake-up timer (WUT)
  */

typedef struct {                                /*!< (@ 0x40002500) WUT Structure                                              */
  __IOM uint16_t  REG_WUT_T2VAL0;               /*!< (@ 0x00000000) WUT Current count value - LS halfword.                     */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_WUT_T2VAL1;               /*!< (@ 0x00000004) WUT Current count value - MS halfword                      */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_WUT_T2CON;                /*!< (@ 0x00000008) WUT Control                                                */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_WUT_T2INC;                /*!< (@ 0x0000000C) WUT 12-bit interval for wakeup field A                     */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_WUT_T2WUFB0;              /*!< (@ 0x00000010) WUT Wakeup field B - LS halfword                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_WUT_T2WUFB1;              /*!< (@ 0x00000014) WUT Wakeup field B - MS halfword                           */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_WUT_T2WUFC0;              /*!< (@ 0x00000018) WUT Wakeup field C - LS halfword                           */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_WUT_T2WUFC1;              /*!< (@ 0x0000001C) WUT Wakeup field C - MS halfword                           */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_WUT_T2WUFD0;              /*!< (@ 0x00000020) WUT Wakeup field D - LS halfword                           */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_WUT_T2WUFD1;              /*!< (@ 0x00000024) WUT Wakeup field D - MS halfword                           */
  __IM  uint16_t  RESERVED9;
  __IOM uint16_t  REG_WUT_T2IEN;                /*!< (@ 0x00000028) WUT Interrupt enable                                       */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  REG_WUT_T2STA;                /*!< (@ 0x0000002C) WUT Status                                                 */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  REG_WUT_T2CLRI;               /*!< (@ 0x00000030) WUT Clear interrupt register                               */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  REG_WUT_WUTVAL_LOW;           /*!< (@ 0x00000034) WUT Unsynchronized lower 16 bits of WU Timer
                                                                    counter value.                                             */
  __IM  uint16_t  RESERVED13;
  __IOM uint16_t  REG_WUT_WUTVAL_HIGH;          /*!< (@ 0x00000038) WUT Unsynchronized upper 16 bits of WU Timer
                                                                    counter value.                                             */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  REG_WUT_T2WUFA0;              /*!< (@ 0x0000003C) WUT Wakeup field A - LS halfword                           */
  __IM  uint16_t  RESERVED15;
  __IOM uint16_t  REG_WUT_T2WUFA1;              /*!< (@ 0x00000040) WUT Wakeup field A - MS halfword                           */
} WUT_Type;                                     /*!< Size = 66 (0x42)                                                          */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief WatchDog Timer (WDT)
  */

typedef struct {                                /*!< (@ 0x40002580) WDT Structure                                              */
  __IOM uint16_t  REG_WDT_T3LD;                 /*!< (@ 0x00000000) WDT Load value                                             */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_WDT_T3VAL;                /*!< (@ 0x00000004) WDT Current count value                                    */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_WDT_T3CON;                /*!< (@ 0x00000008) WDT Control                                                */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_WDT_T3CLRI;               /*!< (@ 0x0000000C) WDT Clear interrupt register                               */
  __IM  uint16_t  RESERVED3[5];
  __IOM uint16_t  REG_WDT_T3STA;                /*!< (@ 0x00000018) WDT Status                                                 */
} WDT_Type;                                     /*!< Size = 26 (0x1a)                                                          */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief RealTimeClock (RTC)
  */

typedef struct {                                /*!< (@ 0x40002600) RTC Structure                                              */
  __IOM uint16_t  REG_RTC_RTCCR;                /*!< (@ 0x00000000) RTC RTC Control                                            */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_RTC_RTCSR0;               /*!< (@ 0x00000004) RTC RTC Status 0                                           */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_RTC_RTCSR1;               /*!< (@ 0x00000008) RTC RTC Status 1                                           */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_RTC_RTCCNT0;              /*!< (@ 0x0000000C) RTC RTC Count 0                                            */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_RTC_RTCCNT1;              /*!< (@ 0x00000010) RTC RTC Count 1                                            */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_RTC_RTCALM0;              /*!< (@ 0x00000014) RTC RTC Alarm 0                                            */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_RTC_RTCALM1;              /*!< (@ 0x00000018) RTC RTC Alarm 1                                            */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_RTC_RTCTRM;               /*!< (@ 0x0000001C) RTC RTC Trim                                               */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_RTC_RTCGWY;               /*!< (@ 0x00000020) RTC RTC Gateway                                            */
} RTC_Type;                                     /*!< Size = 34 (0x22)                                                          */



/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C Master/Slave (I2C)
  */

typedef struct {                                /*!< (@ 0x40003000) I2C Structure                                              */
  __IOM uint16_t  REG_I2C_I2CMCON;              /*!< (@ 0x00000000) I2C Master control                                         */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_I2C_I2CMSTA;              /*!< (@ 0x00000004) I2C Master status                                          */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_I2C_I2CMRX;               /*!< (@ 0x00000008) I2C Master receive data                                    */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_I2C_I2CMTX;               /*!< (@ 0x0000000C) I2C Master transmit data                                   */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_I2C_I2CMRXCNT;            /*!< (@ 0x00000010) I2C Master receive data count                              */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_I2C_I2CMCRXCNT;           /*!< (@ 0x00000014) I2C Master current receive data count                      */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_I2C_I2CADR1;              /*!< (@ 0x00000018) I2C 1st master address byte                                */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_I2C_I2CADR2;              /*!< (@ 0x0000001C) I2C 2nd master address byte                                */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_I2C_I2CBYT;               /*!< (@ 0x00000020) I2C Start byte                                             */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_I2C_I2CDIV;               /*!< (@ 0x00000024) I2C Serial clock period divisor                            */
  __IM  uint16_t  RESERVED9;
  __IOM uint16_t  REG_I2C_I2CSCON;              /*!< (@ 0x00000028) I2C Slave control                                          */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  REG_I2C_I2CSSTA;              /*!< (@ 0x0000002C) I2C Slave I2C Status/Error/IRQ                             */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  REG_I2C_I2CSRX;               /*!< (@ 0x00000030) I2C Slave receive                                          */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  REG_I2C_I2CSTX;               /*!< (@ 0x00000034) I2C Slave transmit                                         */
  __IM  uint16_t  RESERVED13;
  __IOM uint16_t  REG_I2C_I2CALT;               /*!< (@ 0x00000038) I2C Hardware general call ID                               */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  REG_I2C_I2CID0;               /*!< (@ 0x0000003C) I2C 1st slave address device ID                            */
  __IM  uint16_t  RESERVED15;
  __IOM uint16_t  REG_I2C_I2CID1;               /*!< (@ 0x00000040) I2C 2nd slave address device ID                            */
  __IM  uint16_t  RESERVED16;
  __IOM uint16_t  REG_I2C_I2CID2;               /*!< (@ 0x00000044) I2C 3rd slave address device ID                            */
  __IM  uint16_t  RESERVED17;
  __IOM uint16_t  REG_I2C_I2CID3;               /*!< (@ 0x00000048) I2C 4th slave address device ID                            */
  __IM  uint16_t  RESERVED18;
  __IOM uint16_t  REG_I2C_I2CFSTA;              /*!< (@ 0x0000004C) I2C Master and slave FIFO status                           */
  __IM  uint16_t  RESERVED19;
  __IOM uint16_t  REG_I2C_I2CSHCON;             /*!< (@ 0x00000050) I2C Shared control                                         */
  __IM  uint16_t  RESERVED20;
  __IOM uint16_t  REG_I2C_I2CTCTL;              /*!< (@ 0x00000054) I2C Timing Control Register                                */
} I2C_Type;                                     /*!< Size = 86 (0x56)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI0 Maste/Slave (SPI0)
  */

typedef struct {                                /*!< (@ 0x40004000) SPI0 Structure                                             */
  __IOM uint32_t  REG_SPI0_SPISTA;              /*!< (@ 0x00000000) SPI0 Status                                                */
  __IOM uint16_t  REG_SPI0_SPIRX;               /*!< (@ 0x00000004) SPI0 Receive                                               */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_SPI0_SPITX;               /*!< (@ 0x00000008) SPI0 Transmit                                              */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_SPI0_SPIDIV;              /*!< (@ 0x0000000C) SPI0 Baud rate selection                                   */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_SPI0_SPICON;              /*!< (@ 0x00000010) SPI0 SPI configuration                                     */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_SPI0_SPIDMA;              /*!< (@ 0x00000014) SPI0 SPI DMA enable                                        */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_SPI0_SPICNT;              /*!< (@ 0x00000018) SPI0 Transfer byte count                                   */
} SPI0_Type;                                    /*!< Size = 26 (0x1a)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI1 Master/Slave (SPI1)
  */

typedef struct {                                /*!< (@ 0x40004400) SPI1 Structure                                             */
  __IOM uint32_t  REG_SPI1_SPISTA;              /*!< (@ 0x00000000) SPI1 Status                                                */
  __IOM uint32_t  REG_SPI1_SPIRX;               /*!< (@ 0x00000004) SPI1 Receive                                               */
  __IOM uint32_t  REG_SPI1_SPITX;               /*!< (@ 0x00000008) SPI1 Transmit                                              */
  __IOM uint32_t  REG_SPI1_SPIDIV;              /*!< (@ 0x0000000C) SPI1 Baud rate selection                                   */
  __IOM uint32_t  REG_SPI1_SPICON;              /*!< (@ 0x00000010) SPI1 SPI configuration                                     */
  __IOM uint32_t  REG_SPI1_SPIDMA;              /*!< (@ 0x00000014) SPI1 SPI DMA enable                                        */
  __IOM uint32_t  REG_SPI1_SPICNT;              /*!< (@ 0x00000018) SPI1 Transfer byte count                                   */
} SPI1_Type;                                    /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Uart (UART)
  */

typedef struct {                                /*!< (@ 0x40005000) UART Structure                                             */
  __IOM uint32_t  REG_UART_COMRX;               /*!< (@ 0x00000000) UART Receive Buffer Register                               */
  __IOM uint16_t  REG_UART_COMIEN;              /*!< (@ 0x00000004) UART Interrupt Enable                                      */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_UART_COMIIR;              /*!< (@ 0x00000008) UART Interrupt ID                                          */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_UART_COMLCR;              /*!< (@ 0x0000000C) UART Line Control                                          */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_UART_COMMCR;              /*!< (@ 0x00000010) UART Modem Control                                         */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_UART_COMLSR;              /*!< (@ 0x00000014) UART Line Status                                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_UART_COMMSR;              /*!< (@ 0x00000018) UART Modem Status                                          */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_UART_COMSCR;              /*!< (@ 0x0000001C) UART Scratch buffer                                        */
  __IM  uint16_t  RESERVED6[3];
  __IOM uint16_t  REG_UART_COMFBR;              /*!< (@ 0x00000024) UART Fractional Baud Rate                                  */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_UART_COMDIV;              /*!< (@ 0x00000028) UART Baudrate divider                                      */
} UART_Type;                                    /*!< Size = 42 (0x2a)                                                          */



/* =========================================================================================================================== */
/* ================                                            I2S                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2S Master/Slave (I2S)
  */

typedef struct {                                /*!< (@ 0x40005800) I2S Structure                                              */
  __IOM uint16_t  REG_I2S_I2S_OUT1L;            /*!< (@ 0x00000000) I2S Channel 1 LSBs                                         */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_I2S_I2S_OUT1H;            /*!< (@ 0x00000004) I2S Channel 1 MSBs                                         */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_I2S_I2S_OUT2L;            /*!< (@ 0x00000008) I2S Channel 2 LSBs                                         */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_I2S_I2S_OUT2H;            /*!< (@ 0x0000000C) I2S Channel 2 MSBs                                         */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_I2S_I2S_MODE1;            /*!< (@ 0x00000010) I2S I2S format modes 1                                     */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_I2S_I2S_MODE2;            /*!< (@ 0x00000014) I2S I2S format modes 2                                     */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_I2S_I2S_CFG1;             /*!< (@ 0x00000018) I2S I2S configuration 1                                    */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_I2S_I2S_CFG2;             /*!< (@ 0x0000001C) I2S I2S configuration 2                                    */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_I2S_I2S_STAT;             /*!< (@ 0x00000020) I2S I2S status                                             */
} I2S_Type;                                     /*!< Size = 34 (0x22)                                                          */



/* =========================================================================================================================== */
/* ================                                           BEEP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Beeper (BEEP)
  */

typedef struct {                                /*!< (@ 0x40005C00) BEEP Structure                                             */
  __IOM uint16_t  REG_BEEP_BEEP_CFG;            /*!< (@ 0x00000000) BEEP Beeper configuration                                  */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_BEEP_BEEP_STAT;           /*!< (@ 0x00000004) BEEP Beeper status                                         */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_BEEP_BEEP_TONE_A;         /*!< (@ 0x00000008) BEEP Tone A Data                                           */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_BEEP_BEEP_TONE_B;         /*!< (@ 0x0000000C) BEEP Tone B Data                                           */
} BEEP_Type;                                    /*!< Size = 14 (0xe)                                                           */



/* =========================================================================================================================== */
/* ================                                            RNG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Random Bit Generator (RNG)
  */

typedef struct {                                /*!< (@ 0x40006000) RNG Structure                                              */
  __IOM uint16_t  REG_RNG_RNGCTL;               /*!< (@ 0x00000000) RNG RNG Control Register                                   */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_RNG_RNGLEN;               /*!< (@ 0x00000004) RNG RNG Sample Length Register                             */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_RNG_RNGSTAT;              /*!< (@ 0x00000008) RNG RNG Status Register                                    */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_RNG_RNGDATA;              /*!< (@ 0x0000000C) RNG RNG Data Register                                      */
  __IM  uint16_t  RESERVED3;
  __IM  uint16_t  REG_RNG_RNGCNTL;              /*!< (@ 0x00000010) RNG Oscillator Count Low                                   */
  __IM  uint16_t  RESERVED4;
  __IM  uint16_t  REG_RNG_RNGCNTH;              /*!< (@ 0x00000014) RNG Oscillator Count High                                  */
} RNG_Type;                                     /*!< Size = 22 (0x16)                                                          */



/* =========================================================================================================================== */
/* ================                                            LCD                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief LCD Controller (LCD)
  */

typedef struct {                                /*!< (@ 0x40008000) LCD Structure                                              */
  __IOM uint16_t  REG_LCD_LCDCON;               /*!< (@ 0x00000000) LCD LCD Configuration Register                             */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_LCD_LCDSTAT;              /*!< (@ 0x00000004) LCD LCD Status Register                                    */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_LCD_LCDBLINK;             /*!< (@ 0x00000008) LCD LCD Blink Control Register                             */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_LCD_LCDCONTRAST;          /*!< (@ 0x0000000C) LCD LCD Contrast Control Register                          */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_LCD_LCDDATA0_S0;          /*!< (@ 0x00000010) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_LCD_LCDDATA1_S0;          /*!< (@ 0x00000014) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_LCD_LCDDATA2_S0;          /*!< (@ 0x00000018) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_LCD_LCDDATA3_S0;          /*!< (@ 0x0000001C) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_LCD_LCDDATA4_S0;          /*!< (@ 0x00000020) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_LCD_LCDDATA5_S0;          /*!< (@ 0x00000024) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED9;
  __IOM uint16_t  REG_LCD_LCDDATA6_S0;          /*!< (@ 0x00000028) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  REG_LCD_LCDDATA7_S0;          /*!< (@ 0x0000002C) LCD Screen 0 LCD Data Register n                           */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  REG_LCD_LCDDATA0_S1;          /*!< (@ 0x00000030) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  REG_LCD_LCDDATA1_S1;          /*!< (@ 0x00000034) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED13;
  __IOM uint16_t  REG_LCD_LCDDATA2_S1;          /*!< (@ 0x00000038) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  REG_LCD_LCDDATA3_S1;          /*!< (@ 0x0000003C) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED15;
  __IOM uint16_t  REG_LCD_LCDDATA4_S1;          /*!< (@ 0x00000040) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED16;
  __IOM uint16_t  REG_LCD_LCDDATA5_S1;          /*!< (@ 0x00000044) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED17;
  __IOM uint16_t  REG_LCD_LCDDATA6_S1;          /*!< (@ 0x00000048) LCD Screen 1 LCD Data Register n                           */
  __IM  uint16_t  RESERVED18;
  __IOM uint16_t  REG_LCD_LCDDATA7_S1;          /*!< (@ 0x0000004C) LCD Screen 1 LCD Data Register n                           */
} LCD_Type;                                     /*!< Size = 78 (0x4e)                                                          */



/* =========================================================================================================================== */
/* ================                                            DMA                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA (DMA)
  */

typedef struct {                                /*!< (@ 0x40010000) DMA Structure                                              */
  __IOM uint32_t  REG_DMA_DMASTA;               /*!< (@ 0x00000000) DMA DMA Status                                             */
  __IOM uint32_t  REG_DMA_DMACFG;               /*!< (@ 0x00000004) DMA DMA Configuration                                      */
  __IOM uint16_t  REG_DMA_DMAPDBPTR;            /*!< (@ 0x00000008) DMA DMA channel primary control data base pointer          */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_DMA_DMAADBPTR;            /*!< (@ 0x0000000C) DMA DMA channel alternate control data base pointer        */
  __IM  uint16_t  RESERVED1[3];
  __IOM uint16_t  REG_DMA_DMASWREQ;             /*!< (@ 0x00000014) DMA DMA channel software request                           */
  __IM  uint16_t  RESERVED2[5];
  __IOM uint16_t  REG_DMA_DMARMSKSET;           /*!< (@ 0x00000020) DMA DMA channel request mask set                           */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_DMA_DMARMSKCLR;           /*!< (@ 0x00000024) DMA DMA channel request mask clear                         */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_DMA_DMAENSET;             /*!< (@ 0x00000028) DMA DMA channel enable set                                 */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_DMA_DMAENCLR;             /*!< (@ 0x0000002C) DMA DMA channel enable clear                               */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_DMA_DMAALTSET;            /*!< (@ 0x00000030) DMA DMA channel primary-alternate set                      */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_DMA_DMAALTCLR;            /*!< (@ 0x00000034) DMA DMA channel primary-alternate clear                    */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_DMA_DMAPRISET;            /*!< (@ 0x00000038) DMA DMA channel priority set                               */
  __IM  uint16_t  RESERVED9;
  __IOM uint16_t  REG_DMA_DMAPRICLR;            /*!< (@ 0x0000003C) DMA DMA channel priority clear                             */
  __IM  uint16_t  RESERVED10[5];
  __IOM uint16_t  REG_DMA_DMAERRCHNLCLR;        /*!< (@ 0x00000048) DMA DMA Per Channel Error Clear                            */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  REG_DMA_DMAERRCLR;            /*!< (@ 0x0000004C) DMA DMA bus error clear                                    */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  REG_DMA_DMAINVALIDDESCCLR;    /*!< (@ 0x00000050) DMA DMA Per Channel Invalid Descriptor Clear               */
  __IM  uint16_t  RESERVED13[983];
  __IOM uint16_t  REG_DMA_DMABSSET;             /*!< (@ 0x00000800) DMA DMA channel bytes swap enable set                      */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  REG_DMA_DMABSCLR;             /*!< (@ 0x00000804) DMA DMA channel bytes swap enable clear                    */
  __IM  uint16_t  RESERVED15[5];
  __IOM uint16_t  REG_DMA_DMASRCADSSET;         /*!< (@ 0x00000810) DMA DMA channel source address decrement enable
                                                                    set                                                        */
  __IM  uint16_t  RESERVED16;
  __IOM uint16_t  REG_DMA_DMASRCADCLR;          /*!< (@ 0x00000814) DMA DMA channel source address decrement enable
                                                                    clear                                                      */
  __IM  uint16_t  RESERVED17;
  __IOM uint16_t  REG_DMA_DMADSTADSET;          /*!< (@ 0x00000818) DMA DMA channel destination address decrement
                                                                    enable set                                                 */
  __IM  uint16_t  RESERVED18;
  __IOM uint16_t  REG_DMA_DMADSTADCLR;          /*!< (@ 0x0000081C) DMA DMA channel destination address decrement
                                                                    enable clear                                               */
  __IM  uint16_t  RESERVED19[993];
  __IOM uint16_t  REG_DMA_DMAREVID;             /*!< (@ 0x00000FE0) DMA DMA Controller Revision ID                             */
} DMA_Type;                                     /*!< Size = 4066 (0xfe2)                                                       */



/* =========================================================================================================================== */
/* ================                                           FEE0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Instruction Flash Controller (FEE0)
  */

typedef struct {                                /*!< (@ 0x40018000) FEE0 Structure                                             */
  __IOM uint16_t  REG_FEE0_FEESTA;              /*!< (@ 0x00000000) FEE0 Status                                                */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_FEE0_FEECON0;             /*!< (@ 0x00000004) FEE0 Command Control                                       */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_FEE0_FEECMD;              /*!< (@ 0x00000008) FEE0 Command                                               */
  __IM  uint16_t  RESERVED2[3];
  __IOM uint16_t  REG_FEE0_FEEADR0L;            /*!< (@ 0x00000010) FEE0 Lower page address                                    */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_FEE0_FEEADR0H;            /*!< (@ 0x00000014) FEE0 Upper page address                                    */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_FEE0_FEEADR1L;            /*!< (@ 0x00000018) FEE0 Lower page address                                    */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_FEE0_FEEADR1H;            /*!< (@ 0x0000001C) FEE0 Upper page address                                    */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_FEE0_FEEKEY;              /*!< (@ 0x00000020) FEE0 Key                                                   */
  __IM  uint16_t  RESERVED7[7];
  __IOM uint16_t  REG_FEE0_FEESIGL;             /*!< (@ 0x00000030) FEE0 Lower halfword of signature                           */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_FEE0_FEESIGH;             /*!< (@ 0x00000034) FEE0 Upper halfword of signature                           */
  __IM  uint16_t  RESERVED9[9];
  __IOM uint16_t  REG_FEE0_FEEADRAL;            /*!< (@ 0x00000048) FEE0 Lower halfword of write abort address                 */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  REG_FEE0_FEEADRAH;            /*!< (@ 0x0000004C) FEE0 Upper halfword of write abort address                 */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  REG_FEE0_FEEPARCTL;           /*!< (@ 0x00000050) FEE0 Parity Control Register                               */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  REG_FEE0_FEEPARSTA;           /*!< (@ 0x00000054) FEE0 Parity Status Register                                */
  __IM  uint16_t  RESERVED13;
  __IOM uint16_t  REG_FEE0_FEEPARADRL;          /*!< (@ 0x00000058) FEE0 Parity Error Address Low                              */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  REG_FEE0_FEEPARADRH;          /*!< (@ 0x0000005C) FEE0 Parity Error Address High                             */
  __IM  uint16_t  RESERVED15[13];
  __IOM uint16_t  REG_FEE0_FEEAEN0;             /*!< (@ 0x00000078) FEE0 System IRQ abort enable for interrupts 15
                                                                    to 0                                                       */
  __IM  uint16_t  RESERVED16;
  __IOM uint16_t  REG_FEE0_FEEAEN1;             /*!< (@ 0x0000007C) FEE0 System IRQ abort enable for interrupts 31
                                                                    to 16                                                      */
  __IM  uint16_t  RESERVED17;
  __IOM uint16_t  REG_FEE0_FEEAEN2;             /*!< (@ 0x00000080) FEE0 System IRQ abort enable for interrupts 47
                                                                    to 32                                                      */
  __IM  uint16_t  RESERVED18;
  __IOM uint16_t  REG_FEE0_FEEAEN3;             /*!< (@ 0x00000084) FEE0 System IRQ abort enable for interrupts 60
                                                                    to 48                                                      */
} FEE0_Type;                                    /*!< Size = 134 (0x86)                                                         */



/* =========================================================================================================================== */
/* ================                                            GPF                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General Purpose Flash Controller (GPF)
  */

typedef struct {                                /*!< (@ 0x4001C000) GPF Structure                                              */
  __IOM uint16_t  REG_GPF_GPFEESTA;             /*!< (@ 0x00000000) GPF Status                                                 */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_GPF_GPFEECON0;            /*!< (@ 0x00000004) GPF Command Control                                        */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_GPF_GPFEECMD;             /*!< (@ 0x00000008) GPF Command                                                */
  __IM  uint16_t  RESERVED2[3];
  __IOM uint16_t  REG_GPF_GPFEEADR0L;           /*!< (@ 0x00000010) GPF Lower page address                                     */
  __IM  uint16_t  RESERVED3[3];
  __IOM uint16_t  REG_GPF_GPFEEADR1L;           /*!< (@ 0x00000018) GPF Lower page address                                     */
  __IM  uint16_t  RESERVED4[3];
  __IOM uint16_t  REG_GPF_GPFEEKEY;             /*!< (@ 0x00000020) GPF Key                                                    */
  __IM  uint16_t  RESERVED5[7];
  __IOM uint16_t  REG_GPF_GPFEESIGL;            /*!< (@ 0x00000030) GPF Lower halfword of signature                            */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_GPF_GPFEESIGH;            /*!< (@ 0x00000034) GPF Upper halfword of signature                            */
  __IM  uint16_t  RESERVED7[9];
  __IOM uint16_t  REG_GPF_GPFEEADRAL;           /*!< (@ 0x00000048) GPF Lower halfword of write abort address                  */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_GPF_GPFEEADRAH;           /*!< (@ 0x0000004C) GPF Upper halfword of write abort address                  */
  __IM  uint16_t  RESERVED9[21];
  __IOM uint16_t  REG_GPF_GPFEEAEN0;            /*!< (@ 0x00000078) GPF System IRQ abort enable for interrupts 15
                                                                    to 0                                                       */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  REG_GPF_GPFEEAEN1;            /*!< (@ 0x0000007C) GPF System IRQ abort enable for interrupts 31
                                                                    to 16                                                      */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  REG_GPF_GPFEEAEN2;            /*!< (@ 0x00000080) GPF System IRQ abort enable for interrupts 47
                                                                    to 32                                                      */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  REG_GPF_GPFEEAEN3;            /*!< (@ 0x00000084) GPF System IRQ abort enable for interrupts 60
                                                                    to 48                                                      */
} GPF_Type;                                     /*!< Size = 134 (0x86)                                                         */



/* =========================================================================================================================== */
/* ================                                           GPIO0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO (GPIO0)
  */

typedef struct {                                /*!< (@ 0x40020000) GPIO0 Structure                                            */
  __IOM uint16_t  REG_GPIO0_GPCON;              /*!< (@ 0x00000000) GPIO0 GPIO Port 0 Configuration                            */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_GPIO0_GPOEN;              /*!< (@ 0x00000004) GPIO0 GPIO Port 0 output enable                            */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_GPIO0_GPPE;               /*!< (@ 0x00000008) GPIO0 GPIO Port 0 output pullup/pulldown enable            */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_GPIO0_GPIEN;              /*!< (@ 0x0000000C) GPIO0 GPIO Port 0 Input Path Enable                        */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_GPIO0_GPIN;               /*!< (@ 0x00000010) GPIO0 GPIO Port 0 registered data input                    */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_GPIO0_GPOUT;              /*!< (@ 0x00000014) GPIO0 GPIO Port 0 data output                              */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_GPIO0_GPSET;              /*!< (@ 0x00000018) GPIO0 GPIO Port 0 data out set                             */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_GPIO0_GPCLR;              /*!< (@ 0x0000001C) GPIO0 GPIO Port 0 data out clear                           */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_GPIO0_GPTGL;              /*!< (@ 0x00000020) GPIO0 GPIO Port 0 pin toggle                               */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_GPIO0_GPPOL;              /*!< (@ 0x00000024) GPIO0 GPIO Port 0 interrupt polarity                       */
  __IM  uint16_t  RESERVED9;
  __IOM uint16_t  REG_GPIO0_GPIENA;             /*!< (@ 0x00000028) GPIO0 GPIO Port 0 interrupt A enable                       */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  REG_GPIO0_GPIENB;             /*!< (@ 0x0000002C) GPIO0 GPIO Port 0 interrupt B enable                       */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  REG_GPIO0_GPINT;              /*!< (@ 0x00000030) GPIO0 GPIO Port 0 interrupt Status                         */
} GPIO0_Type;                                   /*!< Size = 50 (0x32)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPIH                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPIH Master/Slave (SPIH)
  */

typedef struct {                                /*!< (@ 0x40024000) SPIH Structure                                             */
  __IOM uint16_t  REG_SPIH_SPIH0STA;            /*!< (@ 0x00000000) SPIH Status                                                */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_SPIH_SPIH0RX;             /*!< (@ 0x00000004) SPIH Receive                                               */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_SPIH_SPIH0TX;             /*!< (@ 0x00000008) SPIH Transmit                                              */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_SPIH_SPIH0DIV;            /*!< (@ 0x0000000C) SPIH Baud rate selection                                   */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_SPIH_SPIH0CON;            /*!< (@ 0x00000010) SPIH SPI configuration                                     */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_SPIH_SPIH0DMA;            /*!< (@ 0x00000014) SPIH SPI DMA enable                                        */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_SPIH_SPIH0CNT;            /*!< (@ 0x00000018) SPIH Transfer byte count                                   */
} SPIH_Type;                                    /*!< Size = 26 (0x1a)                                                          */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CRC Engine (CRC)
  */

typedef struct {                                /*!< (@ 0x4002C000) CRC Structure                                              */
  __IOM uint16_t  REG_CRC_CRC_CTL;              /*!< (@ 0x00000000) CRC CRC Control Register                                   */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_CRC_CRC_IPDATA;           /*!< (@ 0x00000004) CRC Input Data Register                                    */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_CRC_CRC_RESULT;           /*!< (@ 0x00000008) CRC CRC Result Register                                    */
} CRC_Type;                                     /*!< Size = 10 (0xa)                                                           */



/* =========================================================================================================================== */
/* ================                                            PDI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Parallel Display Interface (PDI)
  */

typedef struct {                                /*!< (@ 0x40030000) PDI Structure                                              */
  __IOM uint16_t  REG_PDI_PDI_CFG;              /*!< (@ 0x00000000) PDI PDI Configuration Register                             */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_PDI_PDI_INT_SET;          /*!< (@ 0x00000004) PDI PDI Interrupt Set Register                             */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_PDI_PDI_INT_CLR;          /*!< (@ 0x00000008) PDI PDI Interrupt Clear Register                           */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_PDI_PDI_STAT;             /*!< (@ 0x0000000C) PDI PDI Status Register                                    */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_PDI_PDI_CMD;              /*!< (@ 0x00000010) PDI PDI Command Register                                   */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_PDI_PDI_FRDATA_N;         /*!< (@ 0x00000014) PDI PDI Frame Data Count Register                          */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_PDI_PDI_FIFO;             /*!< (@ 0x00000018) PDI PDI Parameter FIFO                                     */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_PDI_PDI_IF_TIMING;        /*!< (@ 0x0000001C) PDI PDI Interface Timing Register                          */
} PDI_Type;                                     /*!< Size = 30 (0x1e)                                                          */



/* =========================================================================================================================== */
/* ================                                            AFE                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog Front End (AFE)
  */

typedef struct {                                /*!< (@ 0x40080000) AFE Structure                                              */
  __IOM uint16_t  REG_AFE_AFE_CFG;              /*!< (@ 0x00000000) AFE AFE Configuration                                      */
  __IM  uint16_t  RESERVED;
  __IOM uint16_t  REG_AFE_AFE_SEQ_CFG;          /*!< (@ 0x00000004) AFE Sequencer Configuration                                */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_AFE_AFE_FIFO_CFG;         /*!< (@ 0x00000008) AFE FIFOs Configuration                                    */
  __IM  uint16_t  RESERVED2;
  __IOM uint16_t  REG_AFE_AFE_SW_CFG;           /*!< (@ 0x0000000C) AFE Switch Matrix Configuration                            */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_AFE_AFE_DAC_CFG;          /*!< (@ 0x00000010) AFE DAC Configuration                                      */
  __IM  uint16_t  RESERVED4;
  __IOM uint16_t  REG_AFE_AFE_WG_CFG;           /*!< (@ 0x00000014) AFE Waveform Generator Configuration                       */
  __IM  uint16_t  RESERVED5;
  __IOM uint16_t  REG_AFE_AFE_WG_DCLEVEL_1;     /*!< (@ 0x00000018) AFE Waveform Generator - Trapezoid DC Level 1              */
  __IM  uint16_t  RESERVED6;
  __IOM uint16_t  REG_AFE_AFE_WG_DCLEVEL_2;     /*!< (@ 0x0000001C) AFE Waveform Generator - Trapezoid DC Level 2              */
  __IM  uint16_t  RESERVED7;
  __IOM uint16_t  REG_AFE_AFE_WG_DELAY_1;       /*!< (@ 0x00000020) AFE Waveform Generator - Trapezoid Delay 1 Time            */
  __IM  uint16_t  RESERVED8;
  __IOM uint16_t  REG_AFE_AFE_WG_SLOPE_1;       /*!< (@ 0x00000024) AFE Waveform Generator - Trapezoid Slope 1 Time            */
  __IM  uint16_t  RESERVED9;
  __IOM uint16_t  REG_AFE_AFE_WG_DELAY_2;       /*!< (@ 0x00000028) AFE Waveform Generator - Trapezoid Delay 2 Time            */
  __IM  uint16_t  RESERVED10;
  __IOM uint16_t  REG_AFE_AFE_WG_SLOPE_2;       /*!< (@ 0x0000002C) AFE Waveform Generator - Trapezoid Slope 2 Time            */
  __IM  uint16_t  RESERVED11;
  __IOM uint16_t  REG_AFE_AFE_WG_FCW;           /*!< (@ 0x00000030) AFE Waveform Generator - Sinusoid Frequency Control
                                                                    Word                                                       */
  __IM  uint16_t  RESERVED12;
  __IOM uint16_t  REG_AFE_AFE_WG_PHASE;         /*!< (@ 0x00000034) AFE Waveform Generator - Sinusoid Phase Offset             */
  __IM  uint16_t  RESERVED13;
  __IOM uint16_t  REG_AFE_AFE_WG_OFFSET;        /*!< (@ 0x00000038) AFE Waveform Generator - Sinusoid Offset                   */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  REG_AFE_AFE_WG_AMPLITUDE;     /*!< (@ 0x0000003C) AFE Waveform Generator - Sinusoid Amplitude                */
  __IM  uint16_t  RESERVED15;
  __IOM uint16_t  REG_AFE_AFE_ADC_CFG;          /*!< (@ 0x00000040) AFE ADC Configuration                                      */
  __IM  uint16_t  RESERVED16;
  __IOM uint16_t  REG_AFE_AFE_SUPPLY_LPF_CFG;   /*!< (@ 0x00000044) AFE Supply Rejection Filter Configuration                  */
  __IM  uint16_t  RESERVED17;
  __IOM uint16_t  REG_AFE_AFE_SW_FULL_CFG_MSB;  /*!< (@ 0x00000048) AFE Switch Matrix Full Configuration (MSB)                 */
  __IM  uint16_t  RESERVED18;
  __IOM uint16_t  REG_AFE_AFE_SW_FULL_CFG_LSB;  /*!< (@ 0x0000004C) AFE Switch Matrix Full Configuration (LSB)                 */
  __IM  uint16_t  RESERVED19[3];
  __IOM uint16_t  REG_AFE_AFE_WG_DAC_CODE;      /*!< (@ 0x00000054) AFE Waveform Generator - DAC Code                          */
  __IM  uint16_t  RESERVED20;
  __IOM uint16_t  REG_AFE_AFE_STATUS;           /*!< (@ 0x00000058) AFE AFE Status                                             */
  __IM  uint16_t  RESERVED21[3];
  __IOM uint16_t  REG_AFE_AFE_SEQ_CRC;          /*!< (@ 0x00000060) AFE Sequencer CRC Value                                    */
  __IM  uint16_t  RESERVED22;
  __IOM uint16_t  REG_AFE_AFE_SEQ_COUNT;        /*!< (@ 0x00000064) AFE Sequencer Command Count                                */
  __IM  uint16_t  RESERVED23;
  __IOM uint16_t  REG_AFE_AFE_SEQ_TIMEOUT;      /*!< (@ 0x00000068) AFE Sequencer Timeout Counter                              */
  __IM  uint16_t  RESERVED24;
  __IOM uint16_t  REG_AFE_AFE_DATA_FIFO_READ;   /*!< (@ 0x0000006C) AFE Data FIFO Read                                         */
  __IM  uint16_t  RESERVED25;
  __IOM uint16_t  REG_AFE_AFE_CMD_FIFO_WRITE;   /*!< (@ 0x00000070) AFE Command FIFO Write                                     */
  __IM  uint16_t  RESERVED26;
  __IOM uint16_t  REG_AFE_AFE_ADC_RESULT;       /*!< (@ 0x00000074) AFE ADC Raw Result                                         */
  __IM  uint16_t  RESERVED27;
  __IOM uint16_t  REG_AFE_AFE_DFT_RESULT_REAL;  /*!< (@ 0x00000078) AFE DFT Result, Real Part                                  */
  __IM  uint16_t  RESERVED28;
  __IOM uint16_t  REG_AFE_AFE_DFT_RESULT_IMAG;  /*!< (@ 0x0000007C) AFE DFT Result, Imaginary Part                             */
  __IM  uint16_t  RESERVED29;
  __IOM uint16_t  REG_AFE_AFE_SUPPLY_LPF_RESULT;/*!< (@ 0x00000080) AFE Supply Rejection Filter Result                         */
  __IM  uint16_t  RESERVED30;
  __IOM uint16_t  REG_AFE_AFE_TEMP_SENSOR_RESULT;/*!< (@ 0x00000084) AFE Temperature Sensor Result                             */
  __IM  uint16_t  RESERVED31[3];
  __IOM uint16_t  REG_AFE_AFE_ANALOG_CAPTURE_IEN;/*!< (@ 0x0000008C) AFE Analog Capture Interrupt Enable                       */
  __IM  uint16_t  RESERVED32;
  __IOM uint16_t  REG_AFE_AFE_ANALOG_GEN_IEN;   /*!< (@ 0x00000090) AFE Analog Generation Interrupt Enable                     */
  __IM  uint16_t  RESERVED33;
  __IOM uint16_t  REG_AFE_AFE_CMD_FIFO_IEN;     /*!< (@ 0x00000094) AFE Command FIFO Interrupt Enable                          */
  __IM  uint16_t  RESERVED34;
  __IOM uint16_t  REG_AFE_AFE_DATA_FIFO_IEN;    /*!< (@ 0x00000098) AFE Data FIFO Interrupt Enable                             */
  __IM  uint16_t  RESERVED35[3];
  __IOM uint16_t  REG_AFE_AFE_ANALOG_CAPTURE_INT;/*!< (@ 0x000000A0) AFE Analog Capture Interrupt                              */
  __IM  uint16_t  RESERVED36;
  __IOM uint16_t  REG_AFE_AFE_ANALOG_GEN_INT;   /*!< (@ 0x000000A4) AFE Analog Generation Interrupt                            */
  __IM  uint16_t  RESERVED37;
  __IOM uint16_t  REG_AFE_AFE_CMD_FIFO_INT;     /*!< (@ 0x000000A8) AFE Command FIFO Interrupt                                 */
  __IM  uint16_t  RESERVED38;
  __IOM uint16_t  REG_AFE_AFE_DATA_FIFO_INT;    /*!< (@ 0x000000AC) AFE Data FIFO Interrupt                                    */
  __IM  uint16_t  RESERVED39;
  __IOM uint16_t  REG_AFE_AFE_SW_STATUS_MSB;    /*!< (@ 0x000000B0) AFE Switch Matrix Status MSB                               */
  __IM  uint16_t  RESERVED40;
  __IOM uint16_t  REG_AFE_AFE_SW_STATUS_LSB;    /*!< (@ 0x000000B4) AFE Switch Matrix Status (LSB)                             */
  __IM  uint16_t  RESERVED41;
  __IOM uint16_t  REG_AFE_AFE_ADCMIN;           /*!< (@ 0x000000B8) AFE ADC Minimum Value Check                                */
  __IM  uint16_t  RESERVED42;
  __IOM uint16_t  REG_AFE_AFE_ADCMAX;           /*!< (@ 0x000000BC) AFE ADC Maximum Value Check                                */
  __IM  uint16_t  RESERVED43;
  __IOM uint16_t  REG_AFE_AFE_ADCDELTA;         /*!< (@ 0x000000C0) AFE ADC Delta Check                                        */
  __IM  uint16_t  RESERVED44[31];
  __IOM uint16_t  REG_AFE_AFE_CAL_DATA_LOCK;    /*!< (@ 0x00000100) AFE Calibration Data Lock                                  */
  __IM  uint16_t  RESERVED45;
  __IOM uint16_t  REG_AFE_AFE_ADC_GAIN_TIA;     /*!< (@ 0x00000104) AFE ADC Gain (TIA Measurement)                             */
  __IM  uint16_t  RESERVED46;
  __IOM uint16_t  REG_AFE_AFE_ADC_OFFSET_TIA;   /*!< (@ 0x00000108) AFE ADC Offset (TIA Measurement)                           */
  __IM  uint16_t  RESERVED47;
  __IOM uint16_t  REG_AFE_AFE_ADC_GAIN_TEMP_SENS;/*!< (@ 0x0000010C) AFE ADC Gain (Temperature Sensor Measurement)             */
  __IM  uint16_t  RESERVED48;
  __IOM uint16_t  REG_AFE_AFE_ADC_OFFSET_TEMP_SENS;/*!< (@ 0x00000110) AFE ADC Offset (Temperature Sensor Measurement)         */
  __IM  uint16_t  RESERVED49[3];
  __IOM uint16_t  REG_AFE_AFE_ADC_GAIN_AUX;     /*!< (@ 0x00000118) AFE ADC Gain (Aux Channel Measurement)                     */
  __IM  uint16_t  RESERVED50;
  __IOM uint16_t  REG_AFE_AFE_ADC_OFFSET_AUX;   /*!< (@ 0x0000011C) AFE ADC Offset (Aux Channel Measurement)                   */
  __IM  uint16_t  RESERVED51;
  __IOM uint16_t  REG_AFE_AFE_DAC_OFFSET_UNITY; /*!< (@ 0x00000120) AFE DAC Offset With Attenuator Disabled                    */
  __IM  uint16_t  RESERVED52;
  __IOM uint16_t  REG_AFE_AFE_DAC_OFFSET_ATTEN; /*!< (@ 0x00000124) AFE DAC Offset With Attenuator Enabled                     */
  __IM  uint16_t  RESERVED53;
  __IOM uint16_t  REG_AFE_AFE_DAC_GAIN;         /*!< (@ 0x00000128) AFE DAC Gain                                               */
  __IM  uint16_t  RESERVED54;
  __IOM uint16_t  REG_AFE_AFE_REF_TRIM0;        /*!< (@ 0x0000012C) AFE Precision Reference Trim 0                             */
  __IM  uint16_t  RESERVED55;
  __IOM uint16_t  REG_AFE_AFE_REF_TRIM1;        /*!< (@ 0x00000130) AFE Precision Reference Trim 1                             */
  __IM  uint16_t  RESERVED56;
  __IOM uint16_t  REG_AFE_AFE_ALDO_TRIM;        /*!< (@ 0x00000134) AFE Analog LDO Trim                                        */
  __IM  uint16_t  RESERVED57;
  __IOM uint16_t  REG_AFE_AFE_DAC_TRIM;         /*!< (@ 0x00000138) AFE DAC Trim                                               */
  __IM  uint16_t  RESERVED58;
  __IOM uint16_t  REG_AFE_AFE_INAMP_TRIM;       /*!< (@ 0x0000013C) AFE INAMP Trim                                             */
  __IM  uint16_t  RESERVED59;
  __IOM uint16_t  REG_AFE_AFE_EXBUF_TRIM;       /*!< (@ 0x00000140) AFE Excitation Buffer Trim                                 */
  __IM  uint16_t  RESERVED60;
  __IOM uint16_t  REG_AFE_AFE_TEMP_SENS_TRIM;   /*!< (@ 0x00000144) AFE Temperature Sensor Trim                                */
} AFE_Type;                                     /*!< Size = 326 (0x146)                                                        */



/* =========================================================================================================================== */
/* ================                                           USB0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief USB Controller (USB0)
  */

typedef struct {                                /*!< (@ 0x400A0000) USB0 Structure                                             */
  __IOM uint8_t   REG_USB0_FADDR;               /*!< (@ 0x00000000) USB0 Function Address Register                             */
  __IOM uint8_t   REG_USB0_POWER;               /*!< (@ 0x00000001) USB0 Power and Device Control Register                     */
  __IOM uint8_t   REG_USB0_INTRTX;              /*!< (@ 0x00000002) USB0 Transmit Interrupt Register                           */
  __IM  uint8_t   RESERVED;
  __IOM uint16_t  REG_USB0_INTRRX;              /*!< (@ 0x00000004) USB0 Receive Interrupt Register                            */
  __IOM uint16_t  REG_USB0_INTRTXE;             /*!< (@ 0x00000006) USB0 Transmit Interrupt Enable Register                    */
  __IOM uint16_t  REG_USB0_INTRRXE;             /*!< (@ 0x00000008) USB0 Receive Interrupt Enable Register                     */
  __IOM uint8_t   REG_USB0_IRQ;                 /*!< (@ 0x0000000A) USB0 Common Interrupts Register                            */
  __IOM uint8_t   REG_USB0_IEN;                 /*!< (@ 0x0000000B) USB0 Common Interrupts Enable Register                     */
  __IOM uint16_t  REG_USB0_FRAME;               /*!< (@ 0x0000000C) USB0 Frame Number Register                                 */
  __IOM uint8_t   REG_USB0_INDEX;               /*!< (@ 0x0000000E) USB0 Index Register                                        */
  __IOM uint8_t   REG_USB0_TESTMODE;            /*!< (@ 0x0000000F) USB0 Testmode Register                                     */
  __IOM uint16_t  REG_USB0_EPI_TXMAXP0;         /*!< (@ 0x00000010) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  REG_USB0_EPI_TXCSR_P0;        /*!< (@ 0x00000012) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  REG_USB0_EPI_RXMAXP0;         /*!< (@ 0x00000014) USB0 EPn Receive Maximum Packet Length Register            */
  __IM  uint16_t  RESERVED1;
  __IOM uint16_t  REG_USB0_EP0I_CNT0;           /*!< (@ 0x00000018) USB0 EP0 Number of Received Bytes Register                 */
  __IM  uint8_t   RESERVED2[5];
  __IOM uint8_t   REG_USB0_EP0I_CFGDATA0;       /*!< (@ 0x0000001F) USB0 EP0 Configuration Information Register                */
  __IOM uint16_t  REG_USB0_FIFO0;               /*!< (@ 0x00000020) USB0 FIFO Word (32-Bit) Register                           */
  __IM  uint16_t  RESERVED3;
  __IOM uint16_t  REG_USB0_FIFO1;               /*!< (@ 0x00000024) USB0 FIFO Word (32-Bit) Register                           */
  __IM  uint16_t  RESERVED4;
  __IOM uint32_t  REG_USB0_FIFO2;               /*!< (@ 0x00000028) USB0 FIFO Word (32-Bit) Register                           */
  __IOM uint16_t  REG_USB0_FIFO3;               /*!< (@ 0x0000002C) USB0 FIFO Word (32-Bit) Register                           */
  __IM  uint16_t  RESERVED5[25];
  __IOM uint8_t   REG_USB0_DEV_CTL;             /*!< (@ 0x00000060) USB0 Device Control Register                               */
  __IOM uint8_t   REG_USB0_MISC;                /*!< (@ 0x00000061) USB0 Miscellaneous Register                                */
  __IM  uint16_t  RESERVED6[11];
  __IOM uint8_t   REG_USB0_EPINFO;              /*!< (@ 0x00000078) USB0 Endpoint Information Register                         */
  __IOM uint8_t   REG_USB0_RAMINFO;             /*!< (@ 0x00000079) USB0 RAM Information Register                              */
  __IOM uint16_t  REG_USB0_LINKINFO;            /*!< (@ 0x0000007A) USB0 Link Information Register                             */
  __IM  uint8_t   RESERVED7;
  __IOM uint8_t   REG_USB0_FS_EOF1;             /*!< (@ 0x0000007D) USB0 Full-Speed EOF 1 Register                             */
  __IM  uint8_t   RESERVED8;
  __IOM uint8_t   REG_USB0_SOFT_RST;            /*!< (@ 0x0000007F) USB0 Software Reset Register                               */
  __IM  uint32_t  RESERVED9[32];
  __IOM uint16_t  REG_USB0_EP0_TXMAXP;          /*!< (@ 0x00000100) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  REG_USB0_EP0_TXCSR_P;         /*!< (@ 0x00000102) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  REG_USB0_EP0_RXMAXP;          /*!< (@ 0x00000104) USB0 EPn Receive Maximum Packet Length Register            */
  __IOM uint16_t  REG_USB0_EP0_RXCSR_P;         /*!< (@ 0x00000106) USB0 EPn Receive Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  REG_USB0_EP0_CNT0;            /*!< (@ 0x00000108) USB0 EP0 Number of Received Bytes Register                 */
  __IM  uint16_t  RESERVED10[3];
  __IOM uint16_t  REG_USB0_EP1_TXMAXP;          /*!< (@ 0x00000110) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  REG_USB0_EP1_TXCSR_P;         /*!< (@ 0x00000112) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  REG_USB0_EP1_RXMAXP;          /*!< (@ 0x00000114) USB0 EPn Receive Maximum Packet Length Register            */
  __IOM uint16_t  REG_USB0_EP1_RXCSR_P;         /*!< (@ 0x00000116) USB0 EPn Receive Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  REG_USB0_EP1_RXCNT;           /*!< (@ 0x00000118) USB0 EPn Number of Bytes Received Register                 */
  __IM  uint16_t  RESERVED11[3];
  __IOM uint16_t  REG_USB0_EP2_TXMAXP;          /*!< (@ 0x00000120) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  REG_USB0_EP2_TXCSR_P;         /*!< (@ 0x00000122) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  REG_USB0_EP2_RXMAXP;          /*!< (@ 0x00000124) USB0 EPn Receive Maximum Packet Length Register            */
  __IOM uint16_t  REG_USB0_EP2_RXCSR_P;         /*!< (@ 0x00000126) USB0 EPn Receive Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  REG_USB0_EP2_RXCNT;           /*!< (@ 0x00000128) USB0 EPn Number of Bytes Received Register                 */
  __IM  uint16_t  RESERVED12[3];
  __IOM uint16_t  REG_USB0_EP3_TXMAXP;          /*!< (@ 0x00000130) USB0 EPn Transmit Maximum Packet Length Register           */
  __IOM uint16_t  REG_USB0_EP3_TXCSR_P;         /*!< (@ 0x00000132) USB0 EPn Transmit Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  REG_USB0_EP3_RXMAXP;          /*!< (@ 0x00000134) USB0 EPn Receive Maximum Packet Length Register            */
  __IOM uint16_t  REG_USB0_EP3_RXCSR_P;         /*!< (@ 0x00000136) USB0 EPn Receive Configuration and Status (Peripheral)
                                                                    Register                                                   */
  __IOM uint16_t  REG_USB0_EP3_RXCNT;           /*!< (@ 0x00000138) USB0 EPn Number of Bytes Received Register                 */
  __IM  uint16_t  RESERVED13[99];
  __IOM uint16_t  REG_USB0_DMA_IRQ;             /*!< (@ 0x00000200) USB0 DMA Interrupt Register                                */
  __IM  uint16_t  RESERVED14;
  __IOM uint16_t  REG_USB0_DMA0_CTL;            /*!< (@ 0x00000204) USB0 DMA Channel n Control Register                        */
  __IM  uint16_t  RESERVED15;
  __IOM uint16_t  REG_USB0_DMA0_ADDR;           /*!< (@ 0x00000208) USB0 DMA Channel n Address Register                        */
  __IM  uint16_t  RESERVED16;
  __IOM uint16_t  REG_USB0_DMA0_CNT;            /*!< (@ 0x0000020C) USB0 DMA Channel n Count Register                          */
  __IM  uint16_t  RESERVED17[3];
  __IOM uint16_t  REG_USB0_DMA1_CTL;            /*!< (@ 0x00000214) USB0 DMA Channel n Control Register                        */
  __IM  uint16_t  RESERVED18;
  __IOM uint16_t  REG_USB0_DMA1_ADDR;           /*!< (@ 0x00000218) USB0 DMA Channel n Address Register                        */
  __IM  uint16_t  RESERVED19;
  __IOM uint16_t  REG_USB0_DMA1_CNT;            /*!< (@ 0x0000021C) USB0 DMA Channel n Count Register                          */
  __IM  uint16_t  RESERVED20[145];
  __IOM uint16_t  REG_USB0_RXDPKTBUFDIS;        /*!< (@ 0x00000340) USB0 RX Double Packet Buffer Disable for Endpoints
                                                                    1 to 3                                                     */
  __IOM uint16_t  REG_USB0_TXDPKTBUFDIS;        /*!< (@ 0x00000342) USB0 TX Double Packet Buffer Disable for Endpoints
                                                                    1 to 3                                                     */
  __IOM uint16_t  REG_USB0_CT_UCH;              /*!< (@ 0x00000344) USB0 Chirp Timeout Register                                */
  __IM  uint16_t  RESERVED21[13];
  __IOM uint16_t  REG_USB0_LPM_ATTR;            /*!< (@ 0x00000360) USB0 LPM Attribute Register                                */
  __IOM uint8_t   REG_USB0_LPM_CTL;             /*!< (@ 0x00000362) USB0 LPM Control Register                                  */
  __IOM uint8_t   REG_USB0_LPM_IEN;             /*!< (@ 0x00000363) USB0 LPM Interrupt Enable Register                         */
  __IOM uint8_t   REG_USB0_LPM_IRQ;             /*!< (@ 0x00000364) USB0 LPM Interrupt Status Register                         */
  __IM  uint8_t   RESERVED22[55];
  __IOM uint16_t  REG_USB0_PHY_CTL;             /*!< (@ 0x0000039C) USB0 FS PHY Control                                        */
  __IOM uint16_t  REG_USB0_PHY_STAT;            /*!< (@ 0x0000039E) USB0 FS PHY Status                                         */
  __IM  uint32_t  RESERVED23[4];
  __IOM uint16_t  REG_USB0_RAM_ADDR;            /*!< (@ 0x000003B0) USB0 RAM Address Register                                  */
  __IM  uint16_t  RESERVED24;
  __IOM uint16_t  REG_USB0_RAM_DATA;            /*!< (@ 0x000003B4) USB0 RAM Data Register                                     */
} USB0_Type;                                    /*!< Size = 950 (0x3b6)                                                        */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define GPT0_BASE                   0x40000000UL
#define GPT1_BASE                   0x40000400UL
#define GPT2_BASE                   0x40000800UL
#define PWR_BASE                    0x40002400UL
#define WUT_BASE                    0x40002500UL
#define WDT_BASE                    0x40002580UL
#define RTC_BASE                    0x40002600UL
#define I2C_BASE                    0x40003000UL
#define SPI0_BASE                   0x40004000UL
#define SPI1_BASE                   0x40004400UL
#define UART_BASE                   0x40005000UL
#define I2S_BASE                    0x40005800UL
#define BEEP_BASE                   0x40005C00UL
#define RNG_BASE                    0x40006000UL
#define LCD_BASE                    0x40008000UL
#define DMA_BASE                    0x40010000UL
#define FEE0_BASE                   0x40018000UL
#define GPF_BASE                    0x4001C000UL
#define GPIO0_BASE                  0x40020000UL
#define SPIH_BASE                   0x40024000UL
#define CRC_BASE                    0x4002C000UL
#define PDI_BASE                    0x40030000UL
#define AFE_BASE                    0x40080000UL
#define USB0_BASE                   0x400A0000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define GPT0                        ((GPT0_Type*)              GPT0_BASE)
#define GPT1                        ((GPT1_Type*)              GPT1_BASE)
#define GPT2                        ((GPT2_Type*)              GPT2_BASE)
#define PWR                         ((PWR_Type*)               PWR_BASE)
#define WUT                         ((WUT_Type*)               WUT_BASE)
#define WDT                         ((WDT_Type*)               WDT_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define I2C                         ((I2C_Type*)               I2C_BASE)
#define SPI0                        ((SPI0_Type*)              SPI0_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define UART                        ((UART_Type*)              UART_BASE)
#define I2S                         ((I2S_Type*)               I2S_BASE)
#define BEEP                        ((BEEP_Type*)              BEEP_BASE)
#define RNG                         ((RNG_Type*)               RNG_BASE)
#define LCD                         ((LCD_Type*)               LCD_BASE)
#define DMA                         ((DMA_Type*)               DMA_BASE)
#define FEE0                        ((FEE0_Type*)              FEE0_BASE)
#define GPF                         ((GPF_Type*)               GPF_BASE)
#define GPIO0                       ((GPIO0_Type*)             GPIO0_BASE)
#define SPIH                        ((SPIH_Type*)              SPIH_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define PDI                         ((PDI_Type*)               PDI_BASE)
#define AFE                         ((AFE_Type*)               AFE_BASE)
#define USB0                        ((USB0_Type*)              USB0_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


#ifdef __cplusplus
}
#endif

#endif /* ADUCM350_H */


/** @} */ /* End of group ADuCM350 */

/** @} */ /* End of group Analog Devices */
